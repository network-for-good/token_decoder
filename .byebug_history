exit
token
decoded_token
certificate.not_before.to_i > Time.now.to_i
certificate.not_before.to_i > Time.now
certificate.not_before.to_i
Time.now
continue
exit
Time.now.to_i
certificate.not_before.to_i
certificate.not_before.to+i
certificate.not_before
JWT.decode(token, public_key, true, { algorithm: "RS256" })
    let(:decoded_token) { JWT.decode(token, public_key, true, { algorithm: "RS256" }) }
Time.now
certificate
exit
token
continue
certificate.not_after
exit
EXIT
certificate.not_after
certificate
decoded_token
:decoded_token
Time.now + exit
Time.now
Time
Time.zone
certificate
token
public_key.exiration
public_key
